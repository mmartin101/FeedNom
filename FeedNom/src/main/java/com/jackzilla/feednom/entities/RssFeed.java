package com.jackzilla.feednom.entities;

import java.util.List;
import com.jackzilla.feednom.entities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.util.Log;
import java.text.ParseException;
import java.text.SimpleDateFormat;
// KEEP INCLUDES END
/**
 * Entity mapped to table RSS_FEED.
 */
public class RssFeed {

    private Long id;
    /** Not-null value. */
    private String title;
    private String description;
    private String link;
    private java.util.Date lastPublished;
    private String imagePath;
    /** Not-null value. */
    private String httpSource;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RssFeedDao myDao;

    private List<RssFeedItem> feedItems;

    // KEEP FIELDS - put your custom fields here
    private static final String TAG = "RssFeed";
    // KEEP FIELDS END

    public RssFeed() {
    }

    public RssFeed(Long id) {
        this.id = id;
    }

    public RssFeed(Long id, String title, String description, String link, java.util.Date lastPublished, String imagePath, String httpSource) {
        this.id = id;
        this.title = title;
        this.description = description;
        this.link = link;
        this.lastPublished = lastPublished;
        this.imagePath = imagePath;
        this.httpSource = httpSource;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRssFeedDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public java.util.Date getLastPublished() {
        return lastPublished;
    }

    public void setLastPublished(java.util.Date lastPublished) {
        this.lastPublished = lastPublished;
    }

    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    /** Not-null value. */
    public String getHttpSource() {
        return httpSource;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHttpSource(String httpSource) {
        this.httpSource = httpSource;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RssFeedItem> getFeedItems() {
        if (feedItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RssFeedItemDao targetDao = daoSession.getRssFeedItemDao();
            List<RssFeedItem> feedItemsNew = targetDao._queryRssFeed_FeedItems(id);
            synchronized (this) {
                if(feedItems == null) {
                    feedItems = feedItemsNew;
                }
            }
        }
        return feedItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFeedItems() {
        feedItems = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void setLastPublishedDate(String date) {
        SimpleDateFormat df = new SimpleDateFormat("E, d MMM yyyy");
        try {
            lastPublished = df.parse(date);
        } catch (ParseException e) {
            Log.d(TAG, "Error parsing date", e);
            e.printStackTrace();
        }

    }
    // KEEP METHODS END

}
